name: Deploy to Amazon ECS (EC2)

on:
  push:
    branches:
      - feature/update-2

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY_APP: laravel-app-repo
  ECS_SERVICE: laravel-app-service
  ECS_CLUSTER: laravel-app-cluster
  CONTAINER_NAME_APP: laravel-app-container

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy Laravel App to ECS (EC2)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_APP }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_APP }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Laravel app image to ECR
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.ECR_REPOSITORY_APP }} .

        echo "Tagging Docker image for ECR..."
        docker tag ${{ env.ECR_REPOSITORY_APP }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}

        echo "Pushing Docker image to ECR..."
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}

    - name: Create ECS Task Definition
      run: |
        echo "Creating ECS task definition JSON file..."
        cat <<EOF > task-def.json
        {
          "family": "${{ env.ECS_SERVICE }}",
          "networkMode": "bridge",
          "executionRoleArn": "arn:aws:iam::ACCOUNT_ID:role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME_APP }}",
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 0
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ env.ECS_SERVICE }}",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Register ECS Task Definition
      run: |
        echo "Registering ECS Task Definition..."
        aws ecs register-task-definition --cli-input-json file://task-def.json

    - name: Ensure ECS Service exists
      run: |
        if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} | grep ACTIVE; then
          echo "Creating ECS service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_SERVICE }} \
            --desired-count 1 \
            --launch-type EC2
        else
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_SERVICE }}
        fi
